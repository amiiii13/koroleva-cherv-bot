
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

API_TOKEN = 'PASTE_YOUR_BOT_TOKEN_HERE'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üìñ –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É"),
    KeyboardButton("‚ú® –°–ª—É—á–∞–π–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ"),
    KeyboardButton("ü§ç –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"),
    KeyboardButton("... –¢–∏—à–∏–Ω–∞")
)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç. –¢—ã –∑–¥–µ—Å—å ‚Äî –∑–Ω–∞—á–∏—Ç, —á—Ç–æ-—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª. –≠—Ç–æ '–ö–æ—Ä–æ–ª–µ–≤–∞'. –ó–¥–µ—Å—å –Ω–µ—Ç —à—É–º–∞, —Ç–æ–ª—å–∫–æ –¥—ã—Ö–∞–Ω–∏–µ.",
        reply_markup=main_menu
    )

@dp.message_handler(lambda message: message.text == "üìñ –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É")
async def send_books(message: types.Message):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("–†—É—Å—Å–∫–∞—è", url="https://sandbox.openai.com/mnt/data/–ö–æ—Ä–æ–ª–µ–≤–∞_—á–µ—Ä–≤–µ–π_–¢–∞_—á—Ç–æ_—Å–º–æ–≥–ª–∞_–†–£_–¥–ª—è_–ø–ª–∞–Ω—à–µ—Ç–∞.pdf"),
        InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", url="https://sandbox.openai.com/mnt/data/–ö–æ—Ä–æ–ª–µ–≤–∞_—á–µ—Ä–≤–µ–π_–¢–∞_—â–æ_–∑–º–æ–≥–ª–∞_UA_–¥–ª—è_–ø–ª–∞–Ω—à–µ—Ç–∞.pdf"),
        InlineKeyboardButton("–û—Å–æ–±–∏—Å—Ç–æ", url="https://sandbox.openai.com/mnt/data/–ö–æ—Ä–æ–ª–µ–≤–∞_—á–µ—Ä–≤–µ–π_–¢–∞_—â–æ_–∑–º–æ–≥–ª–∞_–û—Å–æ–±–∏—Å—Ç–∞_–¥–ª—è_–ê–Ω—ñ.pdf")
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å –µ—ë.", reply_markup=markup)

@dp.message_handler(lambda message: message.text == "‚ú® –°–ª—É—á–∞–π–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ")
async def send_whisper(message: types.Message):
    import random
    quotes = [
        "–¢—ã –Ω–µ —Å–ª–æ–º–∞–Ω–∞. –¢—ã –≤—Å—ë –µ—â—ë –∑–¥–µ—Å—å. –ò —ç—Ç–æ –ø–æ–±–µ–¥–∞.",
        "–ú–∏—Ä –Ω–µ —É–∑–Ω–∞–ª –±—ã —Ç–µ–±—è ‚Äî –µ—Å–ª–∏ –±—ã —Ç—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∞.",
        "–¢–≤–æ—è —Ç–∏—à–∏–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç –≥—Ä–æ–º—á–µ, —á–µ–º –∫—Ä–∏–∫ –¥—Ä—É–≥–∏—Ö.",
        "–ö–æ—Ä–æ–ª–µ–≤–∞ –Ω–µ –∫—Ä–∏—á–∏—Ç. –û–Ω–∞ —Å–º–æ—Ç—Ä–∏—Ç ‚Äî –∏ —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—é—Ç.",
        "–ï—Å–ª–∏ —Ç—ã –≤—ã–∂–∏–ª ‚Äî –∑–Ω–∞—á–∏—Ç, –≤ —Ç–µ–±–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç."
    ]
    await message.answer(random.choice(quotes))

@dp.message_handler(lambda message: message.text == "ü§ç –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
async def support(message: types.Message):
    await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç—É, —á—Ç–æ —Å–æ–∑–¥–∞–ª–∞ —ç—Ç–æ ‚Äî —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –µ—ë –∑–¥–µ—Å—å: @giftsfarming")

@dp.message_handler(lambda message: message.text == "... –¢–∏—à–∏–Ω–∞")
async def silence(message: types.Message):
    await message.answer("–¢—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞—Ç—å—Å—è –∑–¥–µ—Å—å. –ú–æ–ª—á–∞. –ë–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤. –Ø –≤—Å—ë —Ä–∞–≤–Ω–æ —Ä—è–¥–æ–º.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
